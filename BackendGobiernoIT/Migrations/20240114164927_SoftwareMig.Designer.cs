// <auto-generated />
using System;
using BackendGobiernoIT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendGobiernoIT.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240114164927_SoftwareMig")]
    partial class SoftwareMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendCore.Lib.Models.ActivityLog", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("uuid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReturnRequestCode")
                        .HasColumnType("int");

                    b.Property<string>("ReturnRequestDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Date", "uuid");

                    b.HasIndex("uuid");

                    b.ToTable("_ActivityLog");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.ApplicationDomain", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("_ApplicationDomains");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.Connector", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deletable")
                        .HasColumnType("bit");

                    b.Property<string>("Endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("_Connectors");

                    b.HasData(
                        new
                        {
                            Name = "NOTIFICATION_EMAIL",
                            Deletable = false,
                            SmtpPassword = "@2023$hD",
                            SmtpPort = 587,
                            SmtpServer = "smtp.office365.com",
                            SmtpUsername = "helpdesk@nutec.es",
                            Type = 1
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.CoreUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DisableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResource")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PwdCaducityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResourceTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SecurityRole")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surnames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("SecurityRole");

                    b.ToTable("__AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BackendCore.Lib.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DescriptorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistorical")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DescriptorId");

                    b.ToTable("_Files");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.FileDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CaducityDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedDeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastViewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastViewUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastViewUserId");

                    b.ToTable("_FileDescriptors");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.GenericListRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("AttachedFileDescriptorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachedFileDescriptorId");

                    b.ToTable("_GenericLists");

                    b.HasData(
                        new
                        {
                            Id = "DocumentTypeDNI",
                            Category = "DocumentType",
                            Text = "DNI",
                            Type = 0
                        },
                        new
                        {
                            Id = "DocumentTypeNIE",
                            Category = "DocumentType",
                            Text = "NIE",
                            Type = 0
                        },
                        new
                        {
                            Id = "DocumentTypeNIF",
                            Category = "DocumentType",
                            Text = "NIF",
                            Type = 0
                        },
                        new
                        {
                            Id = "CountryPhoneNumberCodeES",
                            Category = "CountryPhoneNumberCode",
                            Text = "+34",
                            Type = 0
                        },
                        new
                        {
                            Id = "CountryPhoneNumberCodeDE",
                            Category = "CountryPhoneNumberCode",
                            Text = "+49",
                            Type = 0
                        },
                        new
                        {
                            Id = "CountryPhoneNumberCodeUK",
                            Category = "CountryPhoneNumberCode",
                            Text = "+44",
                            Type = 0
                        },
                        new
                        {
                            Id = "CountryPhoneNumberCodeIT",
                            Category = "CountryPhoneNumberCode",
                            Text = "+39",
                            Type = 0
                        },
                        new
                        {
                            Id = "CountryPhoneNumberCodeBR",
                            Category = "CountryPhoneNumberCode",
                            Text = "+55",
                            Type = 0
                        },
                        new
                        {
                            Id = "CountryPhoneNumberCodeFR",
                            Category = "CountryPhoneNumberCode",
                            Text = "+33",
                            Type = 0
                        },
                        new
                        {
                            Id = "CountryPhoneNumberCodeCN",
                            Category = "CountryPhoneNumberCode",
                            Text = "+86",
                            Type = 0
                        },
                        new
                        {
                            Id = "LangSPA",
                            Category = "ISO639-2",
                            Text = "Spanish",
                            Type = 0
                        },
                        new
                        {
                            Id = "LangCAT",
                            Category = "ISO639-2",
                            Text = "Catalan",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientOriginFacebook",
                            Category = "ClientOriginType",
                            Text = "Facebook",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientOriginLinkedIn",
                            Category = "ClientOriginType",
                            Text = "LinkedIn",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientOriginInstagram",
                            Category = "ClientOriginType",
                            Text = "Instagram",
                            Type = 0
                        },
                        new
                        {
                            Id = "Label1",
                            Category = "ClientLabel",
                            Text = "Etiqueta1",
                            Type = 0
                        },
                        new
                        {
                            Id = "Label2",
                            Category = "ClientLabel",
                            Text = "Etiqueta2",
                            Type = 0
                        },
                        new
                        {
                            Id = "Caracteristicas1",
                            Category = "ClientFeatures",
                            Text = "Caracteristicas1",
                            Type = 0
                        },
                        new
                        {
                            Id = "Caracteristicas2",
                            Category = "ClientFeatures",
                            Text = "Caracteristicas2",
                            Type = 0
                        },
                        new
                        {
                            Id = "LegalClassifEU",
                            Category = "LegalClassifType",
                            Text = "Empresa Unipersonal",
                            Type = 0
                        },
                        new
                        {
                            Id = "LegalClassifSC",
                            Category = "LegalClassifType",
                            Text = "Sociedad Colectiva",
                            Type = 0
                        },
                        new
                        {
                            Id = "LegalClassifSL",
                            Category = "LegalClassifType",
                            Text = "Sociedad de responsabilidad limitada",
                            Type = 0
                        },
                        new
                        {
                            Id = "LegalClassifSA",
                            Category = "LegalClassifType",
                            Text = "Sociedad Anonimas",
                            Type = 0
                        },
                        new
                        {
                            Id = "BusinessU",
                            Category = "BusinessType",
                            Text = "Empresa Unipersonal",
                            Type = 0
                        },
                        new
                        {
                            Id = "BusinessC",
                            Category = "BusinessType",
                            Text = "Empresa Colectiva",
                            Type = 0
                        },
                        new
                        {
                            Id = "BusinessL",
                            Category = "BusinessType",
                            Text = "Empresa Limitada",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientP",
                            Category = "ClientsType",
                            Text = "Cliente Potencial",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientN",
                            Category = "ClientsType",
                            Text = "Cliente Nuevo",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientI",
                            Category = "ClientsType",
                            Text = "Cliente Impulsivo",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientD",
                            Category = "ClientsType",
                            Text = "Cliente de Descuentos",
                            Type = 0
                        },
                        new
                        {
                            Id = "ClientS",
                            Category = "ClientsType",
                            Text = "Cliente Satisfecho",
                            Type = 0
                        },
                        new
                        {
                            Id = "L0",
                            Category = "NavbarNodeType",
                            Text = "L0",
                            Type = 0
                        },
                        new
                        {
                            Id = "L1",
                            Category = "NavbarNodeType",
                            Text = "L1",
                            Type = 0
                        },
                        new
                        {
                            Id = "ElementL0",
                            Category = "NavbarNodeType",
                            Text = "ElementL0",
                            Type = 0
                        },
                        new
                        {
                            Id = "ElementL1",
                            Category = "NavbarNodeType",
                            Text = "ElementL1",
                            Type = 0
                        },
                        new
                        {
                            Id = "ElementT0",
                            Category = "NavbarNodeType",
                            Text = "ElementT0",
                            Type = 0
                        },
                        new
                        {
                            Id = "Me",
                            Category = "NavbarNodeType",
                            Text = "Me",
                            Type = 0
                        },
                        new
                        {
                            Id = "TGroup",
                            Category = "NavbarNodePosition",
                            Text = "TGroup",
                            Type = 0
                        },
                        new
                        {
                            Id = "LBottom",
                            Category = "NavbarNodePosition",
                            Text = "LBottom",
                            Type = 0
                        },
                        new
                        {
                            Id = "LTop",
                            Category = "NavbarNodePosition",
                            Text = "LTop",
                            Type = 0
                        },
                        new
                        {
                            Id = "L0Position",
                            Category = "NavbarNodePosition",
                            Text = "L0",
                            Type = 0
                        },
                        new
                        {
                            Id = "L1Position",
                            Category = "NavbarNodePosition",
                            Text = "L1",
                            Type = 0
                        },
                        new
                        {
                            Id = "MePosition",
                            Category = "NavbarNodePosition",
                            Text = "Me",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoMB",
                            Category = "EstadoType",
                            Text = "Muy bueno",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoB",
                            Category = "EstadoType",
                            Text = "Bueno",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoM",
                            Category = "EstadoType",
                            Text = "Malo",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoMM",
                            Category = "EstadoType",
                            Text = "Muy malo",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoA",
                            Category = "PropertyCondition",
                            Text = "Alquilado",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoC",
                            Category = "PropertyCondition",
                            Text = "Cesión",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoD",
                            Category = "PropertyCondition",
                            Text = "Disponible",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoEN",
                            Category = "PropertyCondition",
                            Text = "En captación",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoEC",
                            Category = "PropertyCondition",
                            Text = "Exento de contrato",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoND",
                            Category = "PropertyCondition",
                            Text = "No disponible",
                            Type = 0
                        },
                        new
                        {
                            Id = "EstadoR",
                            Category = "PropertyCondition",
                            Text = "Reservado",
                            Type = 0
                        },
                        new
                        {
                            Id = "Local",
                            Category = "PropertyType",
                            Text = "Local",
                            Type = 0
                        },
                        new
                        {
                            Id = "Oficina",
                            Category = "PropertyType",
                            Text = "Oficina",
                            Type = 0
                        },
                        new
                        {
                            Id = "Otros",
                            Category = "PropertyType",
                            Text = "Otro",
                            Type = 0
                        },
                        new
                        {
                            Id = "Parking",
                            Category = "PropertyType",
                            Text = "Parking",
                            Type = 0
                        },
                        new
                        {
                            Id = "Parking+Trastero",
                            Category = "PropertyType",
                            Text = "Parking + trastero",
                            Type = 0
                        },
                        new
                        {
                            Id = "ParkingPequeño",
                            Category = "PropertyType",
                            Text = "Parking pequeño",
                            Type = 0
                        },
                        new
                        {
                            Id = "Piso",
                            Category = "PropertyType",
                            Text = "Piso compartido",
                            Type = 0
                        },
                        new
                        {
                            Id = "Rotulo",
                            Category = "PropertyType",
                            Text = "Rótulo",
                            Type = 0
                        },
                        new
                        {
                            Id = "Sotano",
                            Category = "PropertyType",
                            Text = "Sótano",
                            Type = 0
                        },
                        new
                        {
                            Id = "Trastero",
                            Category = "PropertyType",
                            Text = "Trastero",
                            Type = 0
                        },
                        new
                        {
                            Id = "Vivienda",
                            Category = "PropertyType",
                            Text = "Vivienda",
                            Type = 0
                        },
                        new
                        {
                            Id = "PeriodoS",
                            Category = "PeriodoIBI",
                            Text = "Semanal",
                            Type = 0
                        },
                        new
                        {
                            Id = "PeriodoM",
                            Category = "PeriodoIBI",
                            Text = "Mensual",
                            Type = 0
                        },
                        new
                        {
                            Id = "PeriodoT",
                            Category = "PeriodoIBI",
                            Text = "Trimestral",
                            Type = 0
                        },
                        new
                        {
                            Id = "PeriodoA",
                            Category = "PeriodoIBI",
                            Text = "Anual",
                            Type = 0
                        },
                        new
                        {
                            Id = "ZonaA",
                            Category = "PropertyZone",
                            Text = "Alta",
                            Type = 0
                        },
                        new
                        {
                            Id = "ZonaM",
                            Category = "PropertyZone",
                            Text = "Media",
                            Type = 0
                        },
                        new
                        {
                            Id = "ZonaB",
                            Category = "PropertyZone",
                            Text = "Baja",
                            Type = 0
                        },
                        new
                        {
                            Id = "UsageU",
                            Category = "PropertyUsage",
                            Text = "General",
                            Type = 0
                        },
                        new
                        {
                            Id = "Alquiler",
                            Category = "PropertyModality",
                            Text = "Alquiler",
                            Type = 0
                        },
                        new
                        {
                            Id = "Venta",
                            Category = "PropertyModality",
                            Text = "Venta",
                            Type = 0
                        },
                        new
                        {
                            Id = "Traspaso",
                            Category = "PropertyModality",
                            Text = "Traspaso",
                            Type = 0
                        },
                        new
                        {
                            Id = "VentaAlquiler",
                            Category = "PropertyModality",
                            Text = "Venta y alquiler",
                            Type = 0
                        },
                        new
                        {
                            Id = "IconA",
                            Category = "PropertyIcon",
                            Text = "IconoA",
                            Type = 0
                        },
                        new
                        {
                            Id = "IconB",
                            Category = "PropertyIcon",
                            Text = "IconoB",
                            Type = 0
                        },
                        new
                        {
                            Id = "Legal",
                            Category = "PropertyLegalRenta",
                            Text = "LIB - Renta Libre",
                            Type = 0
                        },
                        new
                        {
                            Id = "Renta",
                            Category = "PropertyLegalRenta",
                            Text = "VPO - Plan anterior a 1992",
                            Type = 0
                        },
                        new
                        {
                            Id = "API1",
                            Category = "APIs",
                            Text = "Ejemplo API1",
                            Type = 0
                        },
                        new
                        {
                            Id = "API2",
                            Category = "APIs",
                            Text = "Ejemplo API2",
                            Type = 0
                        },
                        new
                        {
                            Id = "API3",
                            Category = "APIs",
                            Text = "Ejemplo API3",
                            Type = 0
                        },
                        new
                        {
                            Id = "TopologyFinC",
                            Category = "FincaTopology",
                            Text = "Casa",
                            Type = 0
                        },
                        new
                        {
                            Id = "TopologyFinP",
                            Category = "FincaTopology",
                            Text = "Piso",
                            Type = 0
                        },
                        new
                        {
                            Id = "PromotionA",
                            Category = "Promotions",
                            Text = "PromotionA",
                            Type = 0
                        },
                        new
                        {
                            Id = "PromotionB",
                            Category = "Promotions",
                            Text = "PromotionB",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffA++",
                            Category = "EnergeticEfficiency",
                            Text = "A++",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffA+",
                            Category = "EnergeticEfficiency",
                            Text = "A+",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffB",
                            Category = "EnergeticEfficiency",
                            Text = "B",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffC",
                            Category = "EnergeticEfficiency",
                            Text = "C",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffD",
                            Category = "EnergeticEfficiency",
                            Text = "D",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffE",
                            Category = "EnergeticEfficiency",
                            Text = "E",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffF",
                            Category = "EnergeticEfficiency",
                            Text = "F",
                            Type = 0
                        },
                        new
                        {
                            Id = "EnergEffG",
                            Category = "EnergeticEfficiency",
                            Text = "G",
                            Type = 0
                        },
                        new
                        {
                            Id = "EmissEffA",
                            Category = "EmissionEfficiency",
                            Text = "EmissionA",
                            Type = 0
                        },
                        new
                        {
                            Id = "EmissEffB",
                            Category = "EmissionEfficiency",
                            Text = "EmissionB",
                            Type = 0
                        },
                        new
                        {
                            Id = "Others",
                            Category = "DirectionCategory",
                            Text = "Otros",
                            Type = 0
                        },
                        new
                        {
                            Id = "Pers",
                            Category = "DirectionCategory",
                            Text = "Personal",
                            Type = 0
                        },
                        new
                        {
                            Id = "Prof",
                            Category = "DirectionCategory",
                            Text = "Profesional",
                            Type = 0
                        },
                        new
                        {
                            Id = "PaisA",
                            Category = "Country",
                            Text = "España",
                            Type = 0
                        },
                        new
                        {
                            Id = "PaisB",
                            Category = "Country",
                            Text = "Francia",
                            Type = 0
                        },
                        new
                        {
                            Id = "PobA",
                            Category = "DirectionPoblacion",
                            Text = "PoblaciónA",
                            Type = 0
                        },
                        new
                        {
                            Id = "PobB",
                            Category = "DirectionPoblacion",
                            Text = "PoblaciónB",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProvA",
                            Category = "DirectionProvincia",
                            Text = "ProvinceA",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProvB",
                            Category = "DirectionProvincia",
                            Text = "ProvinceB",
                            Type = 0
                        },
                        new
                        {
                            Id = "TipoA",
                            Category = "DirectionVia",
                            Text = "ViaA",
                            Type = 0
                        },
                        new
                        {
                            Id = "TipoB",
                            Category = "DirectionVia",
                            Text = "ViaB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RolCoordinador",
                            Category = "ContactRole",
                            Text = "Coordinador",
                            Type = 0
                        },
                        new
                        {
                            Id = "RolEspecialista",
                            Category = "ContactRole",
                            Text = "Especialista",
                            Type = 0
                        },
                        new
                        {
                            Id = "RolInvestigador",
                            Category = "ContactRole",
                            Text = "Investigador",
                            Type = 0
                        },
                        new
                        {
                            Id = "FeatureS",
                            Category = "PropertyFeatures",
                            Text = "Soleado",
                            Type = 0
                        },
                        new
                        {
                            Id = "FeatureN",
                            Category = "PropertyFeatures",
                            Text = "Nublado",
                            Type = 0
                        },
                        new
                        {
                            Id = "DepartmentsCompras",
                            Category = "Departments",
                            Text = "Compras",
                            Type = 0
                        },
                        new
                        {
                            Id = "DepartmentsContabilidad",
                            Category = "Departments",
                            Text = "Contabilidad",
                            Type = 0
                        },
                        new
                        {
                            Id = "DepartmentsDireccion",
                            Category = "Departments",
                            Text = "Direccion",
                            Type = 0
                        },
                        new
                        {
                            Id = "DepartmentsRRHH",
                            Category = "Departments",
                            Text = "RRHH",
                            Type = 0
                        },
                        new
                        {
                            Id = "JobPositionCEO",
                            Category = "JobPosition",
                            Text = "CEO",
                            Type = 0
                        },
                        new
                        {
                            Id = "JobPositionEmplyee",
                            Category = "JobPosition",
                            Text = "Empleado",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseStatusNew",
                            Category = "CaseStatus",
                            Text = "Nuevo",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseStatusInProgress",
                            Category = "CaseStatus",
                            Text = "En curso",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseStatusPendingClient",
                            Category = "CaseStatus",
                            Text = "Pendiente cliente",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseStatusPaused",
                            Category = "CaseStatus",
                            Text = "Pausada",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseStatusClosed",
                            Category = "CaseStatus",
                            Text = "Cerrado",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseCategoryConsulta",
                            Category = "CaseCategory",
                            Text = "Consulta",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseCategoryRequest",
                            Category = "CaseCategory",
                            Text = "Petición",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseCategorySecurity",
                            Category = "CaseCategory",
                            Text = "Seguridad",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseCategoryIncidence",
                            Category = "CaseCategory",
                            Text = "Incidencia",
                            Type = 0
                        },
                        new
                        {
                            Id = "CasePriorityHigh",
                            Category = "CasePriority",
                            Text = "High",
                            Type = 0
                        },
                        new
                        {
                            Id = "CasePriorityMid",
                            Category = "CasePriority",
                            Text = "Mid",
                            Type = 0
                        },
                        new
                        {
                            Id = "CasePriorityLow",
                            Category = "CasePriority",
                            Text = "Low",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseClassificationTag0",
                            Category = "CaseClassificationTag",
                            Text = "0",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseClassificationTag1",
                            Category = "CaseClassificationTag",
                            Text = "1",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseClassificationTag2",
                            Category = "CaseClassificationTag",
                            Text = "2",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseEntryChannelCall",
                            Category = "CaseEntryChannel",
                            Text = "Llamada",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseEntryChannelWhatsapp",
                            Category = "CaseEntryChannel",
                            Text = "Whatsapp",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseEntryChannelWeb",
                            Category = "CaseEntryChannel",
                            Text = "Web",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseEntryChannelChatBot",
                            Category = "CaseEntryChannel",
                            Text = "Chatbot",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseEntryChannelClientArea",
                            Category = "CaseEntryChannel",
                            Text = "Área cliente",
                            Type = 0
                        },
                        new
                        {
                            Id = "CaseEntryChannelEmail",
                            Category = "CaseEntryChannel",
                            Text = "Correo electrónico",
                            Type = 0
                        },
                        new
                        {
                            Id = "DeviceTypeOrdenador",
                            Category = "DeviceType",
                            Text = "Ordenador",
                            Type = 0
                        },
                        new
                        {
                            Id = "DeviceTypePortatil",
                            Category = "DeviceType",
                            Text = "Portatil",
                            Type = 0
                        },
                        new
                        {
                            Id = "DeviceTypeNAS",
                            Category = "DeviceType",
                            Text = "NAS",
                            Type = 0
                        },
                        new
                        {
                            Id = "ManufacturerHP",
                            Category = "Manufacturer",
                            Text = "HP",
                            Type = 0
                        },
                        new
                        {
                            Id = "ManufacturerMicrosoft",
                            Category = "Manufacturer",
                            Text = "Microsoft",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemLinux",
                            Category = "OperatingSystem",
                            Text = "Linux",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemWindows7",
                            Category = "OperatingSystem",
                            Text = "Windows 7",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemWindows10",
                            Category = "OperatingSystem",
                            Text = "Windows 10",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemWindowsServer2019",
                            Category = "OperatingSystem",
                            Text = "Windows Server 2019",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemUbuntu",
                            Category = "OperatingSystem",
                            Text = "Ubuntu",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemMacOS",
                            Category = "OperatingSystem",
                            Text = "macOS",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemAndroid",
                            Category = "OperatingSystem",
                            Text = "Android",
                            Type = 0
                        },
                        new
                        {
                            Id = "OperatingSystemIOS",
                            Category = "OperatingSystem",
                            Text = "iOS",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProcessorXeon",
                            Category = "Processor",
                            Text = "Xeon",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProcessorIntelI5",
                            Category = "Processor",
                            Text = "Intel i5",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProcessorARMv7",
                            Category = "Processor",
                            Text = "ARMv7",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProcessorARMv8",
                            Category = "Processor",
                            Text = "ARMv8",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProcessorARMv8_2",
                            Category = "Processor",
                            Text = "ARMv8.2",
                            Type = 0
                        },
                        new
                        {
                            Id = "ProcessorARMv9",
                            Category = "Processor",
                            Text = "ARMv9",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM2GB",
                            Category = "RAM",
                            Text = "2 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM4GB",
                            Category = "RAM",
                            Text = "4 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM8GB",
                            Category = "RAM",
                            Text = "8 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM16GB",
                            Category = "RAM",
                            Text = "16 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM32GB",
                            Category = "RAM",
                            Text = "32 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM64GB",
                            Category = "RAM",
                            Text = "64 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM128GB",
                            Category = "RAM",
                            Text = "128 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM256GB",
                            Category = "RAM",
                            Text = "256 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM512GB",
                            Category = "RAM",
                            Text = "512 GB",
                            Type = 0
                        },
                        new
                        {
                            Id = "RAM1TB",
                            Category = "RAM",
                            Text = "1 TB",
                            Type = 0
                        },
                        new
                        {
                            Id = "HardDriveTypeSSD",
                            Category = "HardDriveType",
                            Text = "SSD",
                            Type = 0
                        },
                        new
                        {
                            Id = "HardDriveTypeNVMe",
                            Category = "HardDriveType",
                            Text = "NVMe",
                            Type = 0
                        },
                        new
                        {
                            Id = "SupplierNutec",
                            Category = "Supplier",
                            Text = "Nutec",
                            Type = 0
                        },
                        new
                        {
                            Id = "IPMask8",
                            Category = "IPMask",
                            Text = "8",
                            Type = 0
                        },
                        new
                        {
                            Id = "IPMask16",
                            Category = "IPMask",
                            Text = "16",
                            Type = 0
                        },
                        new
                        {
                            Id = "IPMask24",
                            Category = "IPMask",
                            Text = "24",
                            Type = 0
                        },
                        new
                        {
                            Id = "IPMask28",
                            Category = "IPMask",
                            Text = "28",
                            Type = 0
                        },
                        new
                        {
                            Id = "IPMask32",
                            Category = "IPMask",
                            Text = "32",
                            Type = 0
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LinkedTableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedTableId");

                    b.ToTable("_Groups");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.LanguageTranslations", b =>
                {
                    b.Property<string>("key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("enUS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("en-US");

                    b.Property<string>("esES")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("es-ES");

                    b.HasKey("key");

                    b.ToTable("_LanguageTranslations");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.NavbarNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeleteClaimId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VTableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("args")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("parent")
                        .HasColumnType("int");

                    b.Property<string>("to")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeleteClaimId");

                    b.HasIndex("Position");

                    b.HasIndex("Type");

                    b.HasIndex("VTableId");

                    b.HasIndex("parent");

                    b.ToTable("_NavbarNodes");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.PasswordRecoveryCode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Code", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("_PasswordRecoveryCodes");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.PermissionNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Permission");

                    b.ToTable("_PermissionTree");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Text = "VirtualTables"
                        },
                        new
                        {
                            Id = -2,
                            ParentId = -1,
                            Text = "Generics"
                        },
                        new
                        {
                            Id = -3,
                            ParentId = -2,
                            Permission = "Create",
                            Text = "Create"
                        },
                        new
                        {
                            Id = -4,
                            ParentId = -2,
                            Permission = "Read",
                            Text = "Read"
                        },
                        new
                        {
                            Id = -5,
                            ParentId = -2,
                            Permission = "Update",
                            Text = "Update"
                        },
                        new
                        {
                            Id = -6,
                            ParentId = -2,
                            Permission = "Delete",
                            Text = "Delete"
                        },
                        new
                        {
                            Id = -7,
                            ParentId = -2,
                            Permission = "Export",
                            Text = "Export"
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.PermissionsList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.HasKey("Id");

                    b.ToTable("_PermissionsList");

                    b.HasData(
                        new
                        {
                            Id = "Create"
                        },
                        new
                        {
                            Id = "Read"
                        },
                        new
                        {
                            Id = "Update"
                        },
                        new
                        {
                            Id = "Delete"
                        },
                        new
                        {
                            Id = "Export"
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.SecurityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessTokenDuration")
                        .HasColumnType("int");

                    b.Property<bool>("CanUsePersistentSession")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LoginBlock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PwdCaducityDays")
                        .HasColumnType("int");

                    b.Property<int>("PwdHistorialLength")
                        .HasColumnType("int");

                    b.Property<int>("PwdMinLength")
                        .HasColumnType("int");

                    b.Property<bool>("PwdRequireNonAlphanumeric")
                        .HasColumnType("bit");

                    b.Property<bool>("PwdRequireNumbers")
                        .HasColumnType("bit");

                    b.Property<bool>("PwdRequireUppercaseAndLowercase")
                        .HasColumnType("bit");

                    b.Property<int>("RefreshTokenDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("_SecurityRoles");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AccessTokenDuration = 360,
                            CanUsePersistentSession = true,
                            IsDefault = true,
                            LoginBlock = 5,
                            Name = "Default",
                            PwdCaducityDays = 365,
                            PwdHistorialLength = 5,
                            PwdMinLength = 5,
                            PwdRequireNonAlphanumeric = false,
                            PwdRequireNumbers = false,
                            PwdRequireUppercaseAndLowercase = false,
                            RefreshTokenDuration = 99999
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("Create")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DefaultColumns")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Export")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("Read")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Update")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Create");

                    b.HasIndex("Delete");

                    b.HasIndex("Export");

                    b.HasIndex("Read");

                    b.HasIndex("Update");

                    b.ToTable("_TableData");

                    b.HasData(
                        new
                        {
                            Id = "Users",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "__AspNetUsers",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "GenericLists",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_GenericLists",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "UserRoles",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "__AspNetUserRoles",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "UserTokens",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "__AspNetUserTokens",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Roles",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "__AspNetRoles",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "NavbarNodes",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_NavbarNodes",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "ActivityLog",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_ActivityLog",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "SecurityRoles",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_SecurityRoles",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "TableData",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_TableData",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "TableDataAlias",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_TableDataAlias",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "TableDataAttributes",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_TableDataAttributes",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "TableDataButtons",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_TableDataButtons",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "TableDataPrimaryKeys",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_TableDataPrimaryKeys",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "FileDescriptors",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_FileDescriptors",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Files",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_Files",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Groups",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_Groups",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Templates",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_Templates",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Connectors",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "_Connectors",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Companies",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "Companies",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "EmailDomains",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "EmailDomains",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Phones",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "Phones",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "WorkCenters",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "WorkCenters",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "CompanyUsers",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "CompanyUsers",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "EmailsInfo",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "EmailsInfo",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Devices",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "Devices",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "FollowUps",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "FollowUps",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Cases",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "Cases",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "CompanyManagers",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "CompanyManagers",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "DeviceLinks",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "DeviceLinks",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "Softwares",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "Softwares",
                            Read = "Read",
                            Update = "Update"
                        },
                        new
                        {
                            Id = "SoftwareInventory",
                            Create = "Create",
                            Delete = "Delete",
                            Export = "Export",
                            Name = "SoftwareInventory",
                            Read = "Read",
                            Update = "Update"
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataAlias", b =>
                {
                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("ColumnAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TableId", "ColumnName");

                    b.HasIndex("ColumnAlias")
                        .IsUnique();

                    b.ToTable("_TableDataAlias");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnsAffected")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("_TableDataAttributes");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AttributeType = "onClick:splitScreenOverlay?NavbarEditorScreen",
                            ColumnsAffected = "*",
                            TableId = "NavbarNodes"
                        },
                        new
                        {
                            Id = -2,
                            AttributeType = "onClick:splitScreenOverlay?GenericListsScreen",
                            ColumnsAffected = "*",
                            TableId = "GenericLists"
                        },
                        new
                        {
                            Id = -3,
                            AttributeType = "onClick:splitScreenOverlay?UserScreen",
                            ColumnsAffected = "*",
                            TableId = "Users"
                        },
                        new
                        {
                            Id = -4,
                            AttributeType = "onClick:splitScreenOverlay?RolesScreen",
                            ColumnsAffected = "*",
                            TableId = "Roles"
                        },
                        new
                        {
                            Id = -5,
                            AttributeType = "onClick:splitScreenOverlay?SecurityRolesScreen",
                            ColumnsAffected = "*",
                            TableId = "SecurityRoles"
                        },
                        new
                        {
                            Id = -6,
                            AttributeType = "onClick:splitScreenOverlay?TemplatesScreen",
                            ColumnsAffected = "*",
                            TableId = "Templates"
                        },
                        new
                        {
                            Id = -7,
                            AttributeType = "onClick:splitScreenOverlay?ConnectorsScreen",
                            ColumnsAffected = "*",
                            TableId = "Connectors"
                        },
                        new
                        {
                            Id = -1001,
                            AttributeType = "onClick:splitScreenOverlay?CompaniesScreen",
                            ColumnsAffected = "*",
                            TableId = "Companies"
                        },
                        new
                        {
                            Id = -1002,
                            AttributeType = "onClick:splitScreenOverlay?EmailDomainsScreen",
                            ColumnsAffected = "*",
                            TableId = "EmailDomains"
                        },
                        new
                        {
                            Id = -1003,
                            AttributeType = "onClick:splitScreenOverlay?PhonesScreen",
                            ColumnsAffected = "*",
                            TableId = "Phones"
                        },
                        new
                        {
                            Id = -1004,
                            AttributeType = "onClick:splitScreenOverlay?WorkCentersScreen",
                            ColumnsAffected = "*",
                            TableId = "WorkCenters"
                        },
                        new
                        {
                            Id = -1005,
                            AttributeType = "onClick:splitScreenOverlay?CompanyUsersScreen",
                            ColumnsAffected = "*",
                            TableId = "CompanyUsers"
                        },
                        new
                        {
                            Id = -1006,
                            AttributeType = "onClick:splitScreenOverlay?EmailsInfoScreen",
                            ColumnsAffected = "*",
                            TableId = "EmailsInfo"
                        },
                        new
                        {
                            Id = -1007,
                            AttributeType = "onClick:splitScreenOverlay?DevicesScreen",
                            ColumnsAffected = "*",
                            TableId = "Devices"
                        },
                        new
                        {
                            Id = -1008,
                            AttributeType = "onClick:splitScreenOverlay?FollowUpsScreen",
                            ColumnsAffected = "*",
                            TableId = "FollowUps"
                        },
                        new
                        {
                            Id = -1009,
                            AttributeType = "onClick:splitScreenOverlay?CasesScreen",
                            ColumnsAffected = "*",
                            TableId = "Cases"
                        },
                        new
                        {
                            Id = -1010,
                            AttributeType = "onClick:splitScreenOverlay?CompanyManagersScreen",
                            ColumnsAffected = "*",
                            TableId = "CompanyManagers"
                        },
                        new
                        {
                            Id = -1011,
                            AttributeType = "onClick:splitScreenOverlay?DeviceLinksScreen",
                            ColumnsAffected = "*",
                            TableId = "DeviceLinks"
                        },
                        new
                        {
                            Id = -1012,
                            AttributeType = "onClick:splitScreenOverlay?SoftwaresScreen",
                            ColumnsAffected = "*",
                            TableId = "Softwares"
                        },
                        new
                        {
                            Id = -1013,
                            AttributeType = "onClick:splitScreenOverlay?SoftwareInventoryScreen",
                            ColumnsAffected = "*",
                            TableId = "SoftwareInventory"
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataButtons", b =>
                {
                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ButtonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnClick")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableId");

                    b.ToTable("_TableDataButtons");

                    b.HasData(
                        new
                        {
                            TableId = "NavbarNodes",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?NavbarEditorScreen"
                        },
                        new
                        {
                            TableId = "GenericLists",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?GenericListsScreen"
                        },
                        new
                        {
                            TableId = "Users",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?UserScreen"
                        },
                        new
                        {
                            TableId = "Roles",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?RolesScreen"
                        },
                        new
                        {
                            TableId = "SecurityRoles",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?SecurityRolesScreen"
                        },
                        new
                        {
                            TableId = "Templates",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?TemplatesScreen"
                        },
                        new
                        {
                            TableId = "Connectors",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?ConnectorsScreen"
                        },
                        new
                        {
                            TableId = "Companies",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?CompaniesScreen"
                        },
                        new
                        {
                            TableId = "EmailDomains",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?EmailDomainsScreen"
                        },
                        new
                        {
                            TableId = "Phones",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?PhonesScreen"
                        },
                        new
                        {
                            TableId = "WorkCenters",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?WorkCentersScreen"
                        },
                        new
                        {
                            TableId = "CompanyUsers",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?CompanyUsersScreen"
                        },
                        new
                        {
                            TableId = "EmailsInfo",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?EmailsInfoScreen"
                        },
                        new
                        {
                            TableId = "Devices",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?DevicesScreen"
                        },
                        new
                        {
                            TableId = "FollowUps",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?FollowUpsScreen"
                        },
                        new
                        {
                            TableId = "Cases",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?CasesScreen"
                        },
                        new
                        {
                            TableId = "CompanyManagers",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?CompanyManagersScreen"
                        },
                        new
                        {
                            TableId = "DeviceLinks",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?DeviceLinksScreen"
                        },
                        new
                        {
                            TableId = "Softwares",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?SoftwaresScreen"
                        },
                        new
                        {
                            TableId = "SoftwareInventory",
                            ButtonName = "new",
                            Image = "punta.png",
                            OnClick = "splitScreenOverlay?SoftwareInventoryScreen"
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataPersistentFilters", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "TableId");

                    b.HasIndex("TableId");

                    b.ToTable("_TableDataPersistentFilters");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataPrimaryKey", b =>
                {
                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TableId", "ColumnName");

                    b.ToTable("_TableDataPrimaryKeys");

                    b.HasData(
                        new
                        {
                            TableId = "Users",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "GenericLists",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "UserRoles",
                            ColumnName = "UserId"
                        },
                        new
                        {
                            TableId = "UserTokens",
                            ColumnName = "UserId"
                        },
                        new
                        {
                            TableId = "UserTokens",
                            ColumnName = "LoginProvider"
                        },
                        new
                        {
                            TableId = "UserTokens",
                            ColumnName = "Name"
                        },
                        new
                        {
                            TableId = "Roles",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "NavbarNodes",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "ActivityLog",
                            ColumnName = "Date"
                        },
                        new
                        {
                            TableId = "ActivityLog",
                            ColumnName = "uuid"
                        },
                        new
                        {
                            TableId = "SecurityRoles",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "TableData",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "TableDataAlias",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "TableDataAlias",
                            ColumnName = "ColumnName"
                        },
                        new
                        {
                            TableId = "TableDataAttributes",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "TableDataButtons",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "TableDataPrimaryKeys",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "TableDataPrimaryKeys",
                            ColumnName = "ColumnName"
                        },
                        new
                        {
                            TableId = "FileDescriptors",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "Files",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "Groups",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "Templates",
                            ColumnName = "Name"
                        },
                        new
                        {
                            TableId = "Connectors",
                            ColumnName = "Name"
                        },
                        new
                        {
                            TableId = "Companies",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "EmailDomains",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "Phones",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "WorkCenters",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "CompanyUsers",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "EmailsInfo",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "Devices",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "FollowUps",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "Cases",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "CompanyManagers",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "DeviceLinks",
                            ColumnName = "SourceDeviceId"
                        },
                        new
                        {
                            TableId = "DeviceLinks",
                            ColumnName = "DestinationDeviceId"
                        },
                        new
                        {
                            TableId = "Softwares",
                            ColumnName = "Id"
                        },
                        new
                        {
                            TableId = "SoftwareInventory",
                            ColumnName = "Id"
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataUsersConfig", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ViewName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColumnOptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplexFilters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilterOptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("SortOptions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "TableId", "ViewName");

                    b.HasIndex("TableId");

                    b.ToTable("_TableDataUsersConfig");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataValidation", b =>
                {
                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConditionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExecutableExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnFalseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TableId", "ConditionName");

                    b.HasIndex("OnFalseMessage");

                    b.ToTable("_TableDataValidations");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.Template", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletable")
                        .HasColumnType("bit");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParametersInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConnectorName");

                    b.HasIndex("GroupId");

                    b.ToTable("_Templates");

                    b.HasData(
                        new
                        {
                            Name = "PASSWORD_RECOVERY",
                            ConnectorName = "NOTIFICATION_EMAIL",
                            Contents = "{RECOVERY_CODE}",
                            Deletable = false,
                            ParametersInfo = "{RECOVERY_CODE}",
                            Type = 1
                        },
                        new
                        {
                            Name = "PASSWORD_CHANGE_CONFIRMATION",
                            ConnectorName = "NOTIFICATION_EMAIL",
                            Contents = "",
                            Deletable = false,
                            ParametersInfo = "",
                            Type = 1
                        },
                        new
                        {
                            Name = "FOLLOWUP_TECHNICIAN",
                            ConnectorName = "NOTIFICATION_EMAIL",
                            Contents = "<$--ESCRIBE ARRIBA--$> {PREV_CONTENT}",
                            Deletable = false,
                            ParametersInfo = "{PREV_CONTENT}, {SUBJECT}",
                            Subject = "{SUBJECT}",
                            Type = 1
                        },
                        new
                        {
                            Name = "FOLLOWUP_CLIENT",
                            ConnectorName = "NOTIFICATION_EMAIL",
                            Contents = "{PREV_CONTENT}",
                            Deletable = false,
                            ParametersInfo = "{PREV_CONTENT}, {SUBJECT}",
                            Subject = "{SUBJECT}",
                            Type = 1
                        },
                        new
                        {
                            Name = "NEW_CASE_CLIENT",
                            ConnectorName = "NOTIFICATION_EMAIL",
                            Contents = "Se ha creado un nuevo caso {CASE_ID}",
                            Deletable = false,
                            ParametersInfo = "{CASE_ID}",
                            Subject = "Nuevo caso {CASE_ID}",
                            Type = 1
                        });
                });

            modelBuilder.Entity("BackendCore.Lib.Models.UControlsProperty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Args")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Readonly")
                        .HasColumnType("bit");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("_UControlsProperties");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.UserApplicationDomain", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationDomainId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ApplicationDomainId");

                    b.HasIndex("ApplicationDomainId");

                    b.ToTable("_UserApplicationDomains");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.UserDevices", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_UserDevices");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.UserPasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("_UserPasswordHistory");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaseDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassificationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClosingUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DependantTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("HardwareInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PriorityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RequesterClientId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClosingUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DependantTaskId");

                    b.HasIndex("EntryChannelId");

                    b.HasIndex("GroupId");

                    b.HasIndex("HardwareInventoryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RequesterClientId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.CompanyManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("CompanyManagers");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntraIdPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntraIdUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("HasRemoteAccess")
                        .HasColumnType("bit");

                    b.Property<string>("JobPositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Department");

                    b.HasIndex("GroupId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalIPMaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HD1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HD2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HD3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalIPMaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InternalPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsInCloud")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInMaintenance")
                        .HasColumnType("bit");

                    b.Property<string>("ManufacturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManufacturerSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OperatingSystemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RAMId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeHD1Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeHD2Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeHD3Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("WarrantyExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("ExternalIPMaskId");

                    b.HasIndex("InternalIPMaskId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("RAMId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeHD1Id");

                    b.HasIndex("TypeHD2Id");

                    b.HasIndex("TypeHD3Id");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.DeviceLink", b =>
                {
                    b.Property<int>("SourceDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationDeviceId")
                        .HasColumnType("int");

                    b.HasKey("SourceDeviceId", "DestinationDeviceId");

                    b.HasIndex("DestinationDeviceId");

                    b.ToTable("DeviceLinks");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.EmailDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EmailDomains");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.EmailInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("EmailsInfo");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.FollowUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("InternalUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("InternalUserId");

                    b.ToTable("FollowUps");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManufacturerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SoftwareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.SoftwareItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLicences")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwareInventory");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.WorkCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("WorkCenters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("__AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("__AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("__AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("__AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("__AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("__AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackendCore.Lib.Models.ActivityLog", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", "user")
                        .WithMany()
                        .HasForeignKey("uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.CoreUser", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId");

                    b.HasOne("BackendCore.Lib.Models.SecurityRole", "SecurityRoles")
                        .WithMany()
                        .HasForeignKey("SecurityRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceType");

                    b.Navigation("SecurityRoles");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.File", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.FileDescriptor", "Descriptor")
                        .WithMany()
                        .HasForeignKey("DescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Descriptor");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.FileDescriptor", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("BackendCore.Lib.Models.CoreUser", "LastViewUser")
                        .WithMany()
                        .HasForeignKey("LastViewUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("Group");

                    b.Navigation("LastViewUser");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.GenericListRecord", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.FileDescriptor", "AttachedFileDescriptor")
                        .WithMany()
                        .HasForeignKey("AttachedFileDescriptorId");

                    b.Navigation("AttachedFileDescriptor");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.Group", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.TableData", "LinkedTable")
                        .WithMany()
                        .HasForeignKey("LinkedTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedTable");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.NavbarNode", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.PermissionsList", "DeleteClaim")
                        .WithMany()
                        .HasForeignKey("DeleteClaimId");

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "_Position")
                        .WithMany()
                        .HasForeignKey("Position");

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "_Type")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.TableData", "TableData")
                        .WithMany()
                        .HasForeignKey("VTableId");

                    b.HasOne("BackendCore.Lib.Models.NavbarNode", "_Parent")
                        .WithMany()
                        .HasForeignKey("parent");

                    b.Navigation("DeleteClaim");

                    b.Navigation("TableData");

                    b.Navigation("_Parent");

                    b.Navigation("_Position");

                    b.Navigation("_Type");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.PasswordRecoveryCode", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", "CoreUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoreUser");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.PermissionNode", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.PermissionNode", "ParentPermissionNode")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("BackendCore.Lib.Models.PermissionsList", "PermissionsList")
                        .WithMany()
                        .HasForeignKey("Permission");

                    b.Navigation("ParentPermissionNode");

                    b.Navigation("PermissionsList");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableData", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.PermissionsList", "CreateClaim")
                        .WithMany()
                        .HasForeignKey("Create");

                    b.HasOne("BackendCore.Lib.Models.PermissionsList", "DeleteClaim")
                        .WithMany()
                        .HasForeignKey("Delete");

                    b.HasOne("BackendCore.Lib.Models.PermissionsList", "ExportClaim")
                        .WithMany()
                        .HasForeignKey("Export");

                    b.HasOne("BackendCore.Lib.Models.PermissionsList", "ReadClaim")
                        .WithMany()
                        .HasForeignKey("Read");

                    b.HasOne("BackendCore.Lib.Models.PermissionsList", "UpdateClaim")
                        .WithMany()
                        .HasForeignKey("Update");

                    b.Navigation("CreateClaim");

                    b.Navigation("DeleteClaim");

                    b.Navigation("ExportClaim");

                    b.Navigation("ReadClaim");

                    b.Navigation("UpdateClaim");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataAlias", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.TableData", "tableData")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tableData");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataAttributes", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.TableData", "tableData")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tableData");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataButtons", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.TableData", "TableData")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableData");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataPersistentFilters", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.TableData", "TableData")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableData");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataPrimaryKey", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.TableData", "TableData")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableData");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataUsersConfig", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.TableData", "tableData")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.CoreUser", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tableData");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.TableDataValidation", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.LanguageTranslations", "languageTranslations")
                        .WithMany()
                        .HasForeignKey("OnFalseMessage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.TableData", "tableData")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("languageTranslations");

                    b.Navigation("tableData");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.Template", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("BackendCore.Lib.Models.Connector", "Connector")
                        .WithMany()
                        .HasForeignKey("ConnectorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.Group", "Attachments")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Attachments");

                    b.Navigation("Category");

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.UserApplicationDomain", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.ApplicationDomain", "ApplicationDomain")
                        .WithMany("UserApplicationDomains")
                        .HasForeignKey("ApplicationDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.CoreUser", "User")
                        .WithMany("UserApplicationDomains")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationDomain");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.UserDevices", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", "user")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.UserPasswordHistory", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Case", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.CoreUser", "ClosingUser")
                        .WithMany()
                        .HasForeignKey("ClosingUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.CoreUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendGobiernoIT.Models.Case", "DependantTask")
                        .WithMany()
                        .HasForeignKey("DependantTaskId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "EntryChannel")
                        .WithMany()
                        .HasForeignKey("EntryChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendGobiernoIT.Models.Device", "HardwareInventory")
                        .WithMany()
                        .HasForeignKey("HardwareInventoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendGobiernoIT.Models.Case", "Parent")
                        .WithMany("Subtasks")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendGobiernoIT.Models.CompanyUser", "RequesterClient")
                        .WithMany()
                        .HasForeignKey("RequesterClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.CoreUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ClosingUser");

                    b.Navigation("Company");

                    b.Navigation("CreatorUser");

                    b.Navigation("DependantTask");

                    b.Navigation("EntryChannel");

                    b.Navigation("Group");

                    b.Navigation("HardwareInventory");

                    b.Navigation("Parent");

                    b.Navigation("Priority");

                    b.Navigation("RequesterClient");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.CompanyManager", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendGobiernoIT.Models.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.CompanyUser", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "GenericList")
                        .WithMany()
                        .HasForeignKey("Department");

                    b.HasOne("BackendCore.Lib.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId");

                    b.HasOne("BackendGobiernoIT.Models.WorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("GenericList");

                    b.Navigation("Group");

                    b.Navigation("JobPosition");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Device", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "ExternalIPMask")
                        .WithMany()
                        .HasForeignKey("ExternalIPMaskId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "InternalIPMask")
                        .WithMany()
                        .HasForeignKey("InternalIPMaskId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "OperatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "RAM")
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "TypeHD1")
                        .WithMany()
                        .HasForeignKey("TypeHD1Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "TypeHD2")
                        .WithMany()
                        .HasForeignKey("TypeHD2Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "TypeHD3")
                        .WithMany()
                        .HasForeignKey("TypeHD3Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendGobiernoIT.Models.WorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DeviceType");

                    b.Navigation("ExternalIPMask");

                    b.Navigation("InternalIPMask");

                    b.Navigation("Manufacturer");

                    b.Navigation("OperatingSystem");

                    b.Navigation("Processor");

                    b.Navigation("RAM");

                    b.Navigation("Supplier");

                    b.Navigation("TypeHD1");

                    b.Navigation("TypeHD2");

                    b.Navigation("TypeHD3");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.DeviceLink", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Device", "DestinationDevice")
                        .WithMany()
                        .HasForeignKey("DestinationDeviceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendGobiernoIT.Models.Device", "SourceDevice")
                        .WithMany()
                        .HasForeignKey("SourceDeviceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationDevice");

                    b.Navigation("SourceDevice");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.EmailDomain", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany("EmailDomains")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.EmailInfo", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.CompanyUser", "CompanyUser")
                        .WithMany("Emails")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.FollowUp", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Case", "Case")
                        .WithMany("FollowUps")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendGobiernoIT.Models.CompanyUser", "ClientUser")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendCore.Lib.Models.CoreUser", "InternalUser")
                        .WithMany()
                        .HasForeignKey("InternalUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("ClientUser");

                    b.Navigation("InternalUser");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Phone", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany("Phones")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Software", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.GenericListRecord", "SoftwareFK")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");

                    b.Navigation("SoftwareFK");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.SoftwareItem", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendGobiernoIT.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.WorkCenter", b =>
                {
                    b.HasOne("BackendGobiernoIT.Models.Company", "Company")
                        .WithMany("WorkCenters")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendCore.Lib.Models.CoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackendCore.Lib.Models.CoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendCore.Lib.Models.ApplicationDomain", b =>
                {
                    b.Navigation("UserApplicationDomains");
                });

            modelBuilder.Entity("BackendCore.Lib.Models.CoreUser", b =>
                {
                    b.Navigation("UserApplicationDomains");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Case", b =>
                {
                    b.Navigation("FollowUps");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.Company", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("EmailDomains");

                    b.Navigation("Phones");

                    b.Navigation("WorkCenters");
                });

            modelBuilder.Entity("BackendGobiernoIT.Models.CompanyUser", b =>
                {
                    b.Navigation("Emails");
                });
#pragma warning restore 612, 618
        }
    }
}
